template: ##blog-page##
title: ##What are web compilers##
subtitle: ####
meta_description: ##Webpack, React, Babel, Gulp, Grunt all these make possible or are possible thanks to a compiling process, to make our Javascript, HTML and CSS more performant and more accessible##
author: ##Jack Misteli##
keywords:##[Babel, Webpack, Grunt, Gulp, compiler, transpiler]##
content:  ##

<p class='prelude'>If you are new to web development you might be very confused by all these tools like Babel, Webpack, Grunt, Gulp... It is often very difficult to differenciate these tools, which ones do the same things and which one do different things. And why do we need them in the first place?</p>

<h1>What is compiling </h1>


<p>Honestly this is better than any explanation I can come up with:</p>

<iframe width="420" height="315" src="https://youtube.com/embed/e4ax90XmUBc?t=110"></iframe>

<p>If you're don't feel like watching the video, we compile stuff to make our code understandable by different machines. So you might write the following Javascript for your website:</p>

<p class='module-name'>my-es6-file.js</p>
<pre><code>
window.setTimeout(()=> {
	alert('Hello there!')
},1000)
</code></pre>

<p>For most of us this piece of code will work. But not for everyone!</p>

<img src='/assets/images/screenshot/caniuse-arrow-functions.JPG' alt='Screenshot of caniuse.com for the arrow of arrow functions'/>

<p>We can see that 94.73% of global Internet users can use arrow function. Many people still use Internet Explorer which doesn't support arrow functions. It happened to me recently. I was developing a web portal, I was really happy with  it and sent the beta to a client. He sent me a message saying he can't login. You guessed it... He was using Internet Explorer. </p>

<p>You can use a compiler to make the code you write on you machine understanble by other people's computers.</p>

<h1>Why compile Javascript, HTML and other web assets</h1>
<h2>Accessibility</h2>
<p>That's one reason we want to compile our code: accessibility. We can use compilers to turn this:</p>

<pre><code>
const sayHi = () => {console.log('say hi')}
</code></pre>

<p>Into this:</p>
<pre><code>
"use strict";

var sayHi = function sayHi() {
  console.log('say hi');
};
</code></pre>
<p class='mini'>I used: https://babeljs.io/repl to do the code translation. It is a fun tool to understand how Babel compiling works.</p>

<p>You can't run the first code snippet on Internet Explorer but you can use the second snippet almost anywhere. Using more modern Javascript feature can allow us to use more readable code. It can also help us write our code faster.</p>

<p>Here we looked at Javascript but the same goes for CSS. For this site I actually write all of my styling in sass and use my build tools to turn it into CSS.</p>

<h2>Minifying</h2

<p>If we open our developer console at this page and look at the source code, we won't understand anything. That's because I use an HTML minifier, a CSS minifier, an image minifier and a Javascript minifier.  </p>

<h2>Improving your developer experience</h2>

<p>In recent days, it feels like the main purpose of all these tools is to allow us developers to have a better experience. For example, when we write code in <a href='/react/what-is-react'>React</a>, <a href="https://angular.io/">Angular</a>, <a href='/vue/what-is-vue'>Vue</a>, <a href="https://emberjs.com/">Ember</a>... we are the code we write is not the code that will be sent to the browser. We use all these frameworks to make our lives easier. Thanks to compilation, we can write complex apps that are human readable. </p>

<p>Another very cool tool is <a href="https://typescriptlang.org">Typescript</a>, which is a strongly type super set of Javascript. Then we have SASS that makes it so much easier to manage the style of our applications (in my opinion). My site heavily relies on <a href='web-development/what-is-gulp'>Gulp</a> to turn my wacky code into hardcorejs.fun.</p>

<h2>Bundle Modules</h2>
<p>This is part of the developer experience. I wanted to make it a separate section because module bundlers are a key component to the frameworks we mentioned. <a href='https://rollupjs.org/'>Rollup</a>, <a href='/web-development/what-is-webpack'>Webpack</a>, <a href='http://browserify.org/'>Browserify</a> are all module bundlers. A module bundler looks at all our files and mashes them together into a few documents or even a single <em>bundler</em>. </p>

<p class='careful'>I might be wrong with this little module bundler history.</p>

<p>Module bundlers first came about because you under HTTP/1.X protocol we could only maintain  six TCP streams per host. It was (still is until HTTP/2 becomes the norm) best to keep the number of requests as low as possible. To do so the easiest method is to simply concatenate our Javascript files. </p>
<pre><code>
var finalFile = file1 + file2
</code></pre>

<p>It works, but it's not super smart or efficient. With the rise of Node and npm we have so many modules (aka packages) that we can use in our code. Browserify was the first big player to allow us to reuse our NodeJs code inside of our browser.</p>

<p>Example: We have a code base that requires us to often capitalizfe strings. So we have a function in <em class='filename'>capitalize.js</em> which we will reuse in many files</p>

<p class='module-name'>capitalize.js</p>
<pre><code>
const capitalize = (s) => s[0].toUpperCase() + s.slice(1)

module.exports = capitalize
</code></pre>

<p>We will import this module in our <em class='filename'>sayHiJerry.js</em>file.</p>
<p class='module-name'>sayHiJerry.js</p>
<pre><code>
const capitalize = require('./capitalize.js')

const name = 'jerry'
const greetings =  'Hi ' + capitalize(name)

console.log(greetings)
</code></pre>

<p>This code could not work in your browser, because <a href="/node/node-vs-javascript"> we cannot use require in the browser</a>. To use this code in our browser we can run:</p>

<code class='command'> browserify -r ./sayHiJerry.js > bundle.js</code>

<p>Which will output a very ugly <em class='filename'>bundle.js</em> file.</p>

<pre><code>
require=(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({"/sayHi.js":[function(require,module,exports){ 
const capitalize = require('./capitalize.js')

const name = 'jerry'
const greetings =  'Hi ' + capitalize(name)

console.log(greetings)
},{"./capitalize.js":1}],1:[function(require,module,exports){
const capitalize = (s) => s[0].toUpperCase() + s.slice(1)

module.exports = capitalize
},{}]},{},[]);
</code></pre>



<h2>Optimizing your code</h2>

<p>Minification is part of optimization. But you can do more than just minifying your files. You can use </p>



<h2>Trying out cool new stuff</h2>
<p>This is connected to the accessibility issue.If we look at <a href="https://github.com/babel/proposals">Babel's progress on ECMAScript proposals</a>, we can see that there are a lot of experimental Javascript features we can play with. </p>

<requirements>
Babel
Webpack
Typescript
React
Gulp 
Webpack
</requirements>
##